
#Область МетодыСервиса

Функция ordersPOST(Запрос)
	
	ДанныеОтвета = СформироватьДанныеОтвета();
	
	ПроверитьВерсиюAPIМагПэй(Запрос, ДанныеОтвета);
	
	ОбработатьЗапрос(Запрос, ДанныеОтвета);
	
	Ответ = Новый HTTPСервисОтвет(ДанныеОтвета["code"], ДанныеОтвета["error"]);
	Ответ.Заголовки.Вставить("Content-Type", "text/html;charset=utf-8");
	Возврат Ответ;
	
КонецФункции

Функция reportPOST(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область МетодыordersPOST

Процедура ОбработатьЗапрос(Запрос, ДанныеОтвета)
	
	Если ЗначениеЗаполнено(ДанныеОтвета.error) Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПрочитатьЗапрос(Запрос, ДанныеОтвета);
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		ДанныеОтвета.error = ОписаниеОшибки();
		Возврат;
	КонецЕсли;
	
	ВерсияОбмена = Перечисления.ВерсииAPIМагПэй[Запрос.ПараметрыURL.Получить("version")];
	
	Если ВерсияОбмена = Перечисления.ВерсииAPIМагПэй.v2 Тогда
		ПрочитатьДанныеВторойВерсии(Данные, ДанныеОтвета);	
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьЗапрос(Запрос, ДанныеОтвета)
	
	Тело = Запрос.ПолучитьТелоКакСтроку();
	
	Данные = ИнструментыВебСервисов.ПрочитатьСтрокуJSON(Тело);
	
	Возврат Данные;
	
КонецФункции

Процедура ПрочитатьДанныеВторойВерсии(Данные, ДанныеОтвета)
	
	ПроверитьВалидностьПолейВторойВерсии(Данные, ДанныеОтвета);
	
	Для Каждого Заказ Из Данные.data Цикл
		
		//Документ = Документы.ЗаказКлиентаМагПэй.СоздатьДокумент();
		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВалидностьПолейВторойВерсии(Данные, ДанныеОтвета)
	
	КодОшибкиОбработки = ИнструментыВебСервисов.КодОшибкиОбработки();
	
	Если Не Данные.Свойство("data") Тогда
		ДанныеОтвета.error = "Не переданны данные в data";
		ДанныеОтвета.code = КодОшибкиОбработки;
		Возврат;	
	КонецЕсли;
	
	ОбязательныеПоляЗаказа = СтруктураВалидногоЗаказа();
	
	Для Каждого Заказ Из Данные.data Цикл
		
		Для Каждого Поле Из ОбязательныеПоляЗаказа Цикл
			
			ПроверитьПолеВДанных(Заказ, Поле, ДанныеОтвета);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеОтвета.error) Тогда
		ДанныеОтвета.code = КодОшибкиОбработки;
		Возврат;	
	КонецЕсли;
	
		
КонецПроцедуры

Функция СтруктураВалидногоЗаказа()
	
	СтруктураЗаказа = Новый Структура;
	СтруктураЗаказа.Вставить("external_id");
	СтруктураЗаказа.Вставить("reference_number");
	СтруктураЗаказа.Вставить("delivery_address");
	СтруктураЗаказа.Вставить("payment_type");
	
	СтруктураТовара = Новый Структура;
	СтруктураТовара.Вставить("name");
	СтруктураТовара.Вставить("nomenclature_id");
	СтруктураТовара.Вставить("price");
	СтруктураТовара.Вставить("tax");
	СтруктураТовара.Вставить("quantity");
		
	СтруктураЗаказа.Вставить("items", СтруктураТовара);
	
	СтруктураКлиента = Новый Структура;
	СтруктураКлиента.Вставить("name");
	СтруктураКлиента.Вставить("phone1");
	СтруктураКлиента.Вставить("email1");
	СтруктураЗаказа.Вставить("client", СтруктураКлиента);
	
	Возврат СтруктураЗаказа; 
	
КонецФункции

Процедура ПроверитьПолеВДанных(Заказ, Поле, ДанныеОтвета);
	
	Если Заказ.Свойство(Поле.Ключ) = Неопределено Тогда
		ДанныеОтвета.error = СтрШаблон("%1/n%2 %3", 
			ДанныеОтвета.error, "В Структуре запроса нет поля ", Поле.Ключ);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поле.Значение) Тогда
		
		Для Каждого ВложенноеЗначение Из Поле.Значение Цикл
			
			Если ТипЗнч(Заказ[Поле.Ключ]) = Тип("Массив") Тогда
				
				Для Каждого ПоляЗаказа Из Заказ[Поле.Ключ] Цикл
					
					Для Каждого ПолеЗаказа Из ПоляЗаказа Цикл
						ПроверитьПолеВДанных(ПолеЗаказа, ВложенноеЗначение, ДанныеОтвета);
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(Заказ[Поле.Ключ]) = Тип("Структура") Тогда
				ПроверитьПолеВДанных(Заказ[Поле.Ключ], ВложенноеЗначение, ДанныеОтвета);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ПроверитьВерсиюAPIМагПэй(Запрос, ДанныеОтвета)
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КодОшибкиОбработки = ИнструментыВебСервисов.КодОшибкиОбработки();
	
	ВерсияОбмена = Запрос.ПараметрыURL.Получить("version");
	
	Если Метаданные.Перечисления.ВерсииAPIМагПэй.ЗначенияПеречисления.Найти(ВерсияОбмена) = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Данная версия API %1 не поддерживается'", КодЯзыка), ВерсияОбмена);
		ДанныеОтвета.code = КодОшибкиОбработки;
		ДанныеОтвета.error = ТекстОшибки;
			
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьДанныеОтвета()
	
	КодУспешногоОтвета = ИнструментыВебСервисов.КодУспешногоОтвета();
	
	ДанныеОтвета = Новый Структура;
	ДанныеОтвета.Вставить("error", Неопределено);
	ДанныеОтвета.Вставить("code", КодУспешногоОтвета);
	
	Возврат ДанныеОтвета;
	
КонецФункции

#КонецОбласти
